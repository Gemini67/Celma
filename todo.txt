Handler:

Entscheidungsgrundlage ob fuer ein spezielles Argument/einen Argument-Typ eine
Spezialisierung im Handler erfolgen soll, oder ob eine Hilfsklasse wie die
'triple logic' verwendet werden soll, haengt davon ab, welche zusaetzlichen/
speziellen Features benoetigt werden.
Z.B. fuer den 'level-up value', wo bei jeder Verwendung der Wert um 1
hochgezaehlt wird, muessen intern die auch Constraints angepasst werden. Deshalb
besser als Feature für den Handler statt als separate Hilfsklasse.
Die 'triple logic' hingegen ist ein gutes Beispiel fuer eine Hilfsklasse.


Handler:

- Bei check() eine Methode als Parameter zu lassen. Fuer den Check wird dann
  diese Methode aufgerufen.
  Idee: Damit kann man Checks implementieren, die sonst schwieriger zu
        beschreiben waeren, z.B. 'nur gerade Zahlen'.
- Generell: 'Manual' Pages in Markdown?


Es gibt Tools, die folgende Logik verwenden:

-v: Verbose
-vv: More Verbose
-vvv: Even more verbose

etc.

Wie setzt man das mit dem Handler um?

1. Hilfsklasse die die Ziel-Variable bei jedem Aufruf hochzaehlt.
   Vorteil: Keine Änderung am Handler.
2. Im Handler, neue Eigenschaft

Analog Punkt 2:

Man koennte auch noch den Spezialfall 'zwei Ziel-Variablen' aus dem Handler
raus nehmen und ueber eine Hilfsklasse loesen. Generell koennte man die drei
Klassen (triple logic, two dest, increment dest) zusammenfassen in einem
Namespace celma::prog_args::helpers (oder so)


Telnet Server

- Modus mit Socket als Parameter: 1 Befehl verarbeiten, fertig.
- Modus als Socket Server, 1 Thread mit synchroner Befehls-Verarbeitung
- Modus als Socket Server, 1 Listen Thread, 1 Thread pro Kommando
- Wenn Socket Server: Port Nummer, Hostname (default: localhost)
- Parameter ob nur 1 Kommando oder so lange bis Client die Verbindung zu macht

Console:
- History
- Prompt: Servername, Uhrzeit, Kommando-Nummer
- Variante zu synchronem Telnet Thread: Thread wird aus Konsole fuer Kommando
  gestartet


Handler:
- In Klasse Groups eine Konstante mit dem Set der Flags, die an alle
  prog_args::Handler uebergeben werden duerfen.
- Wenn Argument Gruppen verwendet werden, duerfen die Destination-Variablen
  nicht 'out of scope' gehen.
  Idee: Klasse implementieren, die eine Variable vom entsprechenden Typ
        speichern kann, dann dieses Object (bzw. dessen Wert) als Ziel-Variable
        an den Gruppen-Argument-Handler uebergeben. Dann braucht es natuerlich
        eine Klasse, die alle diese Werte-Halter speichert
  Idee: Klasse Groups bekommt eine Methode getValueHandler()
        (statt getArgHandler()), diese liefert ein Objekt zurueck mit
        addArgument() Methoden, die eben keine Ziel-Variable benoetigen. Name
        der Neuen Klasse: HandlerValues. Diese ist abgeleitet von Handler, kann
        also von Groups gespeichert und verwendet werden. Zusaetzlich braucht
        die Klasse auch Methoden um die Werte zu den Argumenten zurueck zu
        geben.


Handler:
- Statt explizit einen Vektor fuer mehrfache Werte zu handeln, entweder den Typ
  als nicht-template Typ, aber Container, speichern, oder einen back_inserter
  als Parameter angeben
- Bei Typen mit mehreren Werten: Test dass der gleiche Wert nicht mehrfach
  vorkommt.
- In der Basisklasse TypeBase muessen alle Features, die von den verschiedenen
  Typen verwendet werden koennen, entweder als rein virtuelle Methode oder als
  virtuelle Methode die eine Exception schmeisst, vorhanden sein. Schoener waere
  eine Loesung die TypeBase auf das Minimum beschraenkt, fuer Features/Methoden,
  die es fuer einen bestimmten Typ nicht gibt, wuerde es im besten Fall
  Compiler-Fehlermeldungen geben.
- Werte von Programm-Argumenten via Reflection in einer Struktur speichern?


Um Tools wie z.B. das cmd Tool unterstuetzen zu koennen:

Syntax:
   cmd [options] servername [command and options]

Alles nach Servername sollte fuer das Argument-Handling von 'cmd' selber
ignoriert werden.

Loesung:
- Bei einem Argument kann 'ignore trailing arguments' gesetzt werden. Wenn
  dieses Argument dann verwendet wird, wird der Rest der Argument-Zeile in einem
  String gespeichert und die Iteration abgebrochen.
- Der Argument-List-Iterator braucht eine zusaetzliche Methode: Remaining
  Arguments, die eben die restlichen Argumente ab der Iterator-Position als
  String zurueck gibt. Dieser String muss im geeigneten Moment abgefragt werden
  und im Argument-Handler gespeichert werden.


MultiValueAssign als variadic template

 

Applikations-Kommunikations-Framework

- 1 Handler pro Server/Applikation, zustaendig fuer Netzwerk-Kommunikation
- Prozesse lokal registrieren beim Handler, dieser weiss also welche Prozesse
  aktiv sind
- NanoMsg
 

LoadBalancer

- Server registriert sich bei 1..n LoadBalancer, gibt Version(en) bekannt die
  er unterstuetzen kann
- Server schickt zyklisch Anzahl Clients und System-Auslastung an Load-Balancer
- Client connected zu LoadBalancer, gibt seine Version bekannt, der LB bestimmt
  Server und schickt die Info dem Client
- Server Load Info Telegramme gelten gleichzeitig als alive-Telegramme.
- Mehrere Load-Balancer
- Server Stop: Server schickt Telegramm zu LoadBalancer, damit er keine neuen
  Clients mehr zugewiesen bekommt
- Server schickt auch Telegramm zu Clients, damit diese sich einen neuen Server
  suchen (via LB)


Ein Log Filename muss verschiedene Komponenten enthalten (koennen):
- Verzeichnis
- Konstante Teile
- Wert von Umgebungs-Variablen
- Datum, Uhrzeit in Format xxx
- Log File Nummer
- User-Definierte Attribute

Also braucht es ein Set von Klassen, analog den Klassen fuer das Format der Log
Meldungen, um eben
- Das Format des Filenamen zu definieren.
- Die Format-Definition des Filenamens zu speichern.
- Einen Filenamen anhand der Definition und zusaetzlichen Parametern (Datum,
  Uhrzeit, File-Nummer etc.) zu erzeugen.

Diese Klassen, sowie die Klasse/Funktion, um bestehende Log Files zu rollen,
koennte getrennt vom Rest der Log-Library zur Verfuegung gestellt werden.


Attribut 'log-type' fuer Log-Destinations.

Koennte in Libraries verwendet werden, um eine Log-Meldung zu einem Log (einer
Log-Destination) mit einem bestimmten Typ zu schicken.


Principles:
- No error when used without initialization (log message silently discarded)
- Log string not built when not used
- Macro to send log message to all log destinations (all bits set)


Loesung fuer das 'lokale log Properties' Problem:

Klasse LogPrefix

Wird verwendet um einen Prefix-String zu definieren, der bei jeder Log Meldung
vor den Text eingefuegt werden soll.
Dann kann z.B. eine Member-Variable von diesem Typ definiert werden, welche den
Namen der Klasse enthaelt.
Anschliessend wird dieses Objekt verwendet, um Log-Meldungen zu erzeugen,
entweder mit print() oder Stream-Operatoren.

Konstruktoren:
- LogPrefix( const std::string& str);
- LogPrefix( const char* format, …);
- LogPrefix( const LogPrefix& base_prefix, const std::string& str);
- LogPrefix( const LogPrefix& base_prefix, const char* format, …);

Diese Klasse koennte auch verwendet werden um Properties zu speichern. Dann
muesste aber ein anderer Name gesucht werden.

Und/Oder es gibt 3 Klassen:
- Eine nur fuer Prefixes.
- Eine nur fuer Properties.
- Eine fuer beides.

Jede dieser Klassen muesste natuerlich das gleiche Interface haben um Log
Meldungen zu erzeugen.


Container:

- Rene Tree
