Handler:

Entscheidungsgrundlage ob fuer ein spezielles Argument/einen Argument-Typ eine
Spezialisierung im Handler erfolgen soll, oder ob eine Hilfsklasse wie die
'triple logic' verwendet werden soll, haengt davon ab, welche zusaetzlichen/
speziellen Features benoetigt werden.
Z.B. fuer den 'level-up value', wo bei jeder Verwendung der Wert um 1
hochgezaehlt wird, muessen intern die auch Constraints angepasst werden. Deshalb
besser als Feature für den Handler statt als separate Hilfsklasse.
Die 'triple logic' hingegen ist ein gutes Beispiel fuer eine Hilfsklasse.


Handler:

- Bei check() eine Methode als Parameter zu lassen. Fuer den Check wird dann
  diese Methode aufgerufen.
  Idee: Damit kann man Checks implementieren, die sonst schwieriger zu
        beschreiben waeren, z.B. 'nur gerade Zahlen'.
- Generell: 'Manual' Pages in Markdown?


Man koennte auch noch den Spezialfall 'zwei Ziel-Variablen' aus dem Handler
raus nehmen und ueber eine Hilfsklasse loesen. Generell koennte man die drei
Klassen (triple logic, two dest, increment dest) zusammenfassen in einem
Namespace celma::prog_args::helpers (oder so)


Telnet Server

- Modus mit Socket als Parameter: 1 Befehl verarbeiten, fertig.
- Modus als Socket Server, 1 Thread mit synchroner Befehls-Verarbeitung
- Modus als Socket Server, 1 Listen Thread, 1 Thread pro Kommando
- Wenn Socket Server: Port Nummer, Hostname (default: localhost)
- Parameter ob nur 1 Kommando oder so lange bis Client die Verbindung zu macht

Console:
- History
- Prompt: Servername, Uhrzeit, Kommando-Nummer
- Variante zu synchronem Telnet Thread: Thread wird aus Konsole fuer Kommando
  gestartet


Handler:
- Statt explizit einen Vektor fuer mehrfache Werte zu handeln, entweder den Typ
  als nicht-template Typ, aber Container, speichern, oder einen back_inserter
  als Parameter angeben
- Bei Typen mit mehreren Werten: Test dass der gleiche Wert nicht mehrfach
  vorkommt.
  Parameter um zu definieren dass Wiederholungen erlaubt sind?
- In der Basisklasse TypeBase muessen alle Features, die von den verschiedenen
  Typen verwendet werden koennen, entweder als rein virtuelle Methode oder als
  virtuelle Methode die eine Exception schmeisst, vorhanden sein. Schoener waere
  eine Loesung die TypeBase auf das Minimum beschraenkt, fuer Features/Methoden,
  die es fuer einen bestimmten Typ nicht gibt, wuerde es im besten Fall
  Compiler-Fehlermeldungen geben.
- Werte von Programm-Argumenten via Reflection in einer Struktur speichern?


MultiValueAssign als variadic template
MultiValueAssign loeschen, nur noch tuple verwenden?
 

Applikations-Kommunikations-Framework

- 1 Handler pro Server/Applikation, zustaendig fuer Netzwerk-Kommunikation
- Prozesse lokal registrieren beim Handler, dieser weiss also welche Prozesse
  aktiv sind
- NanoMsg
 

LoadBalancer

- Server registriert sich bei 1..n LoadBalancer, gibt Version(en) bekannt die
  er unterstuetzen kann
- Server schickt zyklisch Anzahl Clients und System-Auslastung an Load-Balancer
- Client connected zu LoadBalancer, gibt seine Version bekannt, der LB bestimmt
  Server und schickt die Info dem Client
- Server Load Info Telegramme gelten gleichzeitig als alive-Telegramme.
- Mehrere Load-Balancer
- Server Stop: Server schickt Telegramm zu LoadBalancer, damit er keine neuen
  Clients mehr zugewiesen bekommt
- Server schickt auch Telegramm zu Clients, damit diese sich einen neuen Server
  suchen (via LB)


Die Klassen, um eine (Log) Filenamen mit Pfad etc. zu definieren/erzeugen, sowie
die Klasse/Funktion, um bestehende Log Files zu rollen, koennte getrennt vom
Rest der Log-Library zur Verfuegung gestellt werden?


Attribut 'log-type' fuer Log-Destinations.

Koennte in Libraries verwendet werden, um eine Log-Meldung zu einem Log (einer
Log-Destination) mit einem bestimmten Typ zu schicken.


Handler:
- Destination IP Adresse? IPv4? IPv8?
- Destination Mail Adresse?
- Destination Webseite?


Log:
- Titelzeile?
- Summary?
- Automatische Index-Erzeugung fuer
  - Zeit (Granularitaet?)
  - Woerter
  - Felder aus dem Log Format?


Handler, Values formatieren:
Variante 1:
- Nur noch 1 Format pro Value Type moeglich.
- D.h., Normale Typen, Vector etc. akzeptieren nur 1 Format
- Tuple akzeptiert 1 Format pro Typ
- Beim addFormat() muss der Index des Typs angegeben werden, auf den das Format
  angewendet werden soll. Default: 0 (1. Typ/alle Typen)

Variante 2:
- Weiterhin mehrere Formate pro Typ moeglich
- Statt Format-Pointer Vektor muesste ein Vektor von Vektoren von Formaten
  verwendet werden

Fragen:
- Braucht es mehrere Format-Handler fuer einen Typ?
- Oder reicht einer, und es wird eine andere Moeglichkeit geboten, mehrere
  Format-Handler zu kombinieren?


Handler, Constraints:
Basisklasse IConstraint aufteilen in 2 Klassen, 1 fuer Constraints die durch die
Verwendung eines Arguments gesetzt werden, und 1 fuer Constraints die im Handler
gesetzt werden.
Namen?
- IArgConstraint
- IHandlerConstraint

